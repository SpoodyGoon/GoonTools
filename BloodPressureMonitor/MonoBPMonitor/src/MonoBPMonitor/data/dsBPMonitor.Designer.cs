//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MonoBPMonitor.data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsBPMonitor")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsBPMonitor : global::System.Data.DataSet {
        
        private tb_DoctorDataTable tabletb_Doctor;
        
        private tb_UserDataTable tabletb_User;
        
        private tb_EntryDataTable tabletb_Entry;
        
        private tb_MedicineDataTable tabletb_Medicine;
        
        private global::System.Data.DataRelation relationtb_Doctor_tb_Medicine;
        
        private global::System.Data.DataRelation relationtb_User_tb_Medicine;
        
        private global::System.Data.DataRelation relationtb_User_tb_Entry;
        
        private global::System.Data.DataRelation relationtb_User_tb_Doctor;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsBPMonitor() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsBPMonitor(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tb_Doctor"] != null)) {
                    base.Tables.Add(new tb_DoctorDataTable(ds.Tables["tb_Doctor"]));
                }
                if ((ds.Tables["tb_User"] != null)) {
                    base.Tables.Add(new tb_UserDataTable(ds.Tables["tb_User"]));
                }
                if ((ds.Tables["tb_Entry"] != null)) {
                    base.Tables.Add(new tb_EntryDataTable(ds.Tables["tb_Entry"]));
                }
                if ((ds.Tables["tb_Medicine"] != null)) {
                    base.Tables.Add(new tb_MedicineDataTable(ds.Tables["tb_Medicine"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tb_DoctorDataTable tb_Doctor {
            get {
                return this.tabletb_Doctor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tb_UserDataTable tb_User {
            get {
                return this.tabletb_User;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tb_EntryDataTable tb_Entry {
            get {
                return this.tabletb_Entry;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tb_MedicineDataTable tb_Medicine {
            get {
                return this.tabletb_Medicine;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsBPMonitor cln = ((dsBPMonitor)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tb_Doctor"] != null)) {
                    base.Tables.Add(new tb_DoctorDataTable(ds.Tables["tb_Doctor"]));
                }
                if ((ds.Tables["tb_User"] != null)) {
                    base.Tables.Add(new tb_UserDataTable(ds.Tables["tb_User"]));
                }
                if ((ds.Tables["tb_Entry"] != null)) {
                    base.Tables.Add(new tb_EntryDataTable(ds.Tables["tb_Entry"]));
                }
                if ((ds.Tables["tb_Medicine"] != null)) {
                    base.Tables.Add(new tb_MedicineDataTable(ds.Tables["tb_Medicine"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletb_Doctor = ((tb_DoctorDataTable)(base.Tables["tb_Doctor"]));
            if ((initTable == true)) {
                if ((this.tabletb_Doctor != null)) {
                    this.tabletb_Doctor.InitVars();
                }
            }
            this.tabletb_User = ((tb_UserDataTable)(base.Tables["tb_User"]));
            if ((initTable == true)) {
                if ((this.tabletb_User != null)) {
                    this.tabletb_User.InitVars();
                }
            }
            this.tabletb_Entry = ((tb_EntryDataTable)(base.Tables["tb_Entry"]));
            if ((initTable == true)) {
                if ((this.tabletb_Entry != null)) {
                    this.tabletb_Entry.InitVars();
                }
            }
            this.tabletb_Medicine = ((tb_MedicineDataTable)(base.Tables["tb_Medicine"]));
            if ((initTable == true)) {
                if ((this.tabletb_Medicine != null)) {
                    this.tabletb_Medicine.InitVars();
                }
            }
            this.relationtb_Doctor_tb_Medicine = this.Relations["tb_Doctor_tb_Medicine"];
            this.relationtb_User_tb_Medicine = this.Relations["tb_User_tb_Medicine"];
            this.relationtb_User_tb_Entry = this.Relations["tb_User_tb_Entry"];
            this.relationtb_User_tb_Doctor = this.Relations["tb_User_tb_Doctor"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsBPMonitor";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsBPMonitor.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletb_Doctor = new tb_DoctorDataTable();
            base.Tables.Add(this.tabletb_Doctor);
            this.tabletb_User = new tb_UserDataTable();
            base.Tables.Add(this.tabletb_User);
            this.tabletb_Entry = new tb_EntryDataTable();
            base.Tables.Add(this.tabletb_Entry);
            this.tabletb_Medicine = new tb_MedicineDataTable();
            base.Tables.Add(this.tabletb_Medicine);
            this.relationtb_Doctor_tb_Medicine = new global::System.Data.DataRelation("tb_Doctor_tb_Medicine", new global::System.Data.DataColumn[] {
                        this.tabletb_Doctor.DoctorIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabletb_Medicine.DoctorIDColumn}, false);
            this.Relations.Add(this.relationtb_Doctor_tb_Medicine);
            this.relationtb_User_tb_Medicine = new global::System.Data.DataRelation("tb_User_tb_Medicine", new global::System.Data.DataColumn[] {
                        this.tabletb_User.UserIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabletb_Medicine.UserIDColumn}, false);
            this.Relations.Add(this.relationtb_User_tb_Medicine);
            this.relationtb_User_tb_Entry = new global::System.Data.DataRelation("tb_User_tb_Entry", new global::System.Data.DataColumn[] {
                        this.tabletb_User.UserIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabletb_Entry.UserIDColumn}, false);
            this.Relations.Add(this.relationtb_User_tb_Entry);
            this.relationtb_User_tb_Doctor = new global::System.Data.DataRelation("tb_User_tb_Doctor", new global::System.Data.DataColumn[] {
                        this.tabletb_User.UserIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabletb_Doctor.UserIDColumn}, false);
            this.Relations.Add(this.relationtb_User_tb_Doctor);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetb_Doctor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetb_User() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetb_Entry() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetb_Medicine() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsBPMonitor ds = new dsBPMonitor();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void tb_DoctorRowChangeEventHandler(object sender, tb_DoctorRowChangeEvent e);
        
        public delegate void tb_UserRowChangeEventHandler(object sender, tb_UserRowChangeEvent e);
        
        public delegate void tb_EntryRowChangeEventHandler(object sender, tb_EntryRowChangeEvent e);
        
        public delegate void tb_MedicineRowChangeEventHandler(object sender, tb_MedicineRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tb_DoctorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDoctorID;
            
            private global::System.Data.DataColumn columnDoctorName;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnPhoneNum;
            
            private global::System.Data.DataColumn columnUserID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_DoctorDataTable() {
                this.TableName = "tb_Doctor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tb_DoctorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tb_DoctorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DoctorIDColumn {
                get {
                    return this.columnDoctorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DoctorNameColumn {
                get {
                    return this.columnDoctorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneNumColumn {
                get {
                    return this.columnPhoneNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_DoctorRow this[int index] {
                get {
                    return ((tb_DoctorRow)(this.Rows[index]));
                }
            }
            
            public event tb_DoctorRowChangeEventHandler tb_DoctorRowChanging;
            
            public event tb_DoctorRowChangeEventHandler tb_DoctorRowChanged;
            
            public event tb_DoctorRowChangeEventHandler tb_DoctorRowDeleting;
            
            public event tb_DoctorRowChangeEventHandler tb_DoctorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtb_DoctorRow(tb_DoctorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_DoctorRow Addtb_DoctorRow(string DoctorName, string Location, string PhoneNum, tb_UserRow parenttb_UserRowBytb_User_tb_Doctor) {
                tb_DoctorRow rowtb_DoctorRow = ((tb_DoctorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        DoctorName,
                        Location,
                        PhoneNum,
                        null};
                if ((parenttb_UserRowBytb_User_tb_Doctor != null)) {
                    columnValuesArray[4] = parenttb_UserRowBytb_User_tb_Doctor[0];
                }
                rowtb_DoctorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtb_DoctorRow);
                return rowtb_DoctorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_DoctorRow FindByDoctorID(long DoctorID) {
                return ((tb_DoctorRow)(this.Rows.Find(new object[] {
                            DoctorID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tb_DoctorDataTable cln = ((tb_DoctorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tb_DoctorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDoctorID = base.Columns["DoctorID"];
                this.columnDoctorName = base.Columns["DoctorName"];
                this.columnLocation = base.Columns["Location"];
                this.columnPhoneNum = base.Columns["PhoneNum"];
                this.columnUserID = base.Columns["UserID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDoctorID = new global::System.Data.DataColumn("DoctorID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDoctorID);
                this.columnDoctorName = new global::System.Data.DataColumn("DoctorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDoctorName);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnPhoneNum = new global::System.Data.DataColumn("PhoneNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhoneNum);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDoctorID}, true));
                this.columnDoctorID.AutoIncrement = true;
                this.columnDoctorID.AllowDBNull = false;
                this.columnDoctorID.Unique = true;
                this.columnDoctorName.AllowDBNull = false;
                this.columnDoctorName.MaxLength = 75;
                this.columnLocation.MaxLength = 255;
                this.columnPhoneNum.MaxLength = 50;
                this.columnUserID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_DoctorRow Newtb_DoctorRow() {
                return ((tb_DoctorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tb_DoctorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tb_DoctorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tb_DoctorRowChanged != null)) {
                    this.tb_DoctorRowChanged(this, new tb_DoctorRowChangeEvent(((tb_DoctorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tb_DoctorRowChanging != null)) {
                    this.tb_DoctorRowChanging(this, new tb_DoctorRowChangeEvent(((tb_DoctorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tb_DoctorRowDeleted != null)) {
                    this.tb_DoctorRowDeleted(this, new tb_DoctorRowChangeEvent(((tb_DoctorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tb_DoctorRowDeleting != null)) {
                    this.tb_DoctorRowDeleting(this, new tb_DoctorRowChangeEvent(((tb_DoctorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetb_DoctorRow(tb_DoctorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsBPMonitor ds = new dsBPMonitor();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tb_DoctorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tb_UserDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnDateAdded;
            
            private global::System.Data.DataColumn columnIsActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_UserDataTable() {
                this.TableName = "tb_User";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tb_UserDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tb_UserDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateAddedColumn {
                get {
                    return this.columnDateAdded;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_UserRow this[int index] {
                get {
                    return ((tb_UserRow)(this.Rows[index]));
                }
            }
            
            public event tb_UserRowChangeEventHandler tb_UserRowChanging;
            
            public event tb_UserRowChangeEventHandler tb_UserRowChanged;
            
            public event tb_UserRowChangeEventHandler tb_UserRowDeleting;
            
            public event tb_UserRowChangeEventHandler tb_UserRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtb_UserRow(tb_UserRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_UserRow Addtb_UserRow(string UserName, System.DateTime DateAdded, bool IsActive) {
                tb_UserRow rowtb_UserRow = ((tb_UserRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        UserName,
                        DateAdded,
                        IsActive};
                rowtb_UserRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtb_UserRow);
                return rowtb_UserRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_UserRow FindByUserID(long UserID) {
                return ((tb_UserRow)(this.Rows.Find(new object[] {
                            UserID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tb_UserDataTable cln = ((tb_UserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tb_UserDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserID = base.Columns["UserID"];
                this.columnUserName = base.Columns["UserName"];
                this.columnDateAdded = base.Columns["DateAdded"];
                this.columnIsActive = base.Columns["IsActive"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnDateAdded = new global::System.Data.DataColumn("DateAdded", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateAdded);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUserID}, true));
                this.columnUserID.AutoIncrement = true;
                this.columnUserID.AllowDBNull = false;
                this.columnUserID.Unique = true;
                this.columnUserName.AllowDBNull = false;
                this.columnUserName.MaxLength = 50;
                this.columnDateAdded.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_UserRow Newtb_UserRow() {
                return ((tb_UserRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tb_UserRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tb_UserRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tb_UserRowChanged != null)) {
                    this.tb_UserRowChanged(this, new tb_UserRowChangeEvent(((tb_UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tb_UserRowChanging != null)) {
                    this.tb_UserRowChanging(this, new tb_UserRowChangeEvent(((tb_UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tb_UserRowDeleted != null)) {
                    this.tb_UserRowDeleted(this, new tb_UserRowChangeEvent(((tb_UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tb_UserRowDeleting != null)) {
                    this.tb_UserRowDeleting(this, new tb_UserRowChangeEvent(((tb_UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetb_UserRow(tb_UserRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsBPMonitor ds = new dsBPMonitor();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tb_UserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tb_EntryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEntryID;
            
            private global::System.Data.DataColumn columnEntryDateTime;
            
            private global::System.Data.DataColumn columnSystolic;
            
            private global::System.Data.DataColumn columnDiastolic;
            
            private global::System.Data.DataColumn columnHeartRate;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnUserID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_EntryDataTable() {
                this.TableName = "tb_Entry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tb_EntryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tb_EntryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntryIDColumn {
                get {
                    return this.columnEntryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntryDateTimeColumn {
                get {
                    return this.columnEntryDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SystolicColumn {
                get {
                    return this.columnSystolic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiastolicColumn {
                get {
                    return this.columnDiastolic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeartRateColumn {
                get {
                    return this.columnHeartRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_EntryRow this[int index] {
                get {
                    return ((tb_EntryRow)(this.Rows[index]));
                }
            }
            
            public event tb_EntryRowChangeEventHandler tb_EntryRowChanging;
            
            public event tb_EntryRowChangeEventHandler tb_EntryRowChanged;
            
            public event tb_EntryRowChangeEventHandler tb_EntryRowDeleting;
            
            public event tb_EntryRowChangeEventHandler tb_EntryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtb_EntryRow(tb_EntryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_EntryRow Addtb_EntryRow(long EntryID, System.DateTime EntryDateTime, long Systolic, long Diastolic, long HeartRate, string Notes, tb_UserRow parenttb_UserRowBytb_User_tb_Entry) {
                tb_EntryRow rowtb_EntryRow = ((tb_EntryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EntryID,
                        EntryDateTime,
                        Systolic,
                        Diastolic,
                        HeartRate,
                        Notes,
                        null};
                if ((parenttb_UserRowBytb_User_tb_Entry != null)) {
                    columnValuesArray[6] = parenttb_UserRowBytb_User_tb_Entry[0];
                }
                rowtb_EntryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtb_EntryRow);
                return rowtb_EntryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_EntryRow FindByEntryID(long EntryID) {
                return ((tb_EntryRow)(this.Rows.Find(new object[] {
                            EntryID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tb_EntryDataTable cln = ((tb_EntryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tb_EntryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEntryID = base.Columns["EntryID"];
                this.columnEntryDateTime = base.Columns["EntryDateTime"];
                this.columnSystolic = base.Columns["Systolic"];
                this.columnDiastolic = base.Columns["Diastolic"];
                this.columnHeartRate = base.Columns["HeartRate"];
                this.columnNotes = base.Columns["Notes"];
                this.columnUserID = base.Columns["UserID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEntryID = new global::System.Data.DataColumn("EntryID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryID);
                this.columnEntryDateTime = new global::System.Data.DataColumn("EntryDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryDateTime);
                this.columnSystolic = new global::System.Data.DataColumn("Systolic", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSystolic);
                this.columnDiastolic = new global::System.Data.DataColumn("Diastolic", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiastolic);
                this.columnHeartRate = new global::System.Data.DataColumn("HeartRate", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeartRate);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEntryID}, true));
                this.columnEntryID.AllowDBNull = false;
                this.columnEntryID.Unique = true;
                this.columnEntryDateTime.AllowDBNull = false;
                this.columnSystolic.AllowDBNull = false;
                this.columnDiastolic.AllowDBNull = false;
                this.columnHeartRate.AllowDBNull = false;
                this.columnNotes.MaxLength = 2147483647;
                this.columnUserID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_EntryRow Newtb_EntryRow() {
                return ((tb_EntryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tb_EntryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tb_EntryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tb_EntryRowChanged != null)) {
                    this.tb_EntryRowChanged(this, new tb_EntryRowChangeEvent(((tb_EntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tb_EntryRowChanging != null)) {
                    this.tb_EntryRowChanging(this, new tb_EntryRowChangeEvent(((tb_EntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tb_EntryRowDeleted != null)) {
                    this.tb_EntryRowDeleted(this, new tb_EntryRowChangeEvent(((tb_EntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tb_EntryRowDeleting != null)) {
                    this.tb_EntryRowDeleting(this, new tb_EntryRowChangeEvent(((tb_EntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetb_EntryRow(tb_EntryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsBPMonitor ds = new dsBPMonitor();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tb_EntryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tb_MedicineDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMedicineID;
            
            private global::System.Data.DataColumn columnMedicineName;
            
            private global::System.Data.DataColumn columnDosage;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnDoctorID;
            
            private global::System.Data.DataColumn columnUserID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_MedicineDataTable() {
                this.TableName = "tb_Medicine";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tb_MedicineDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tb_MedicineDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MedicineIDColumn {
                get {
                    return this.columnMedicineID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MedicineNameColumn {
                get {
                    return this.columnMedicineName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DosageColumn {
                get {
                    return this.columnDosage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DoctorIDColumn {
                get {
                    return this.columnDoctorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_MedicineRow this[int index] {
                get {
                    return ((tb_MedicineRow)(this.Rows[index]));
                }
            }
            
            public event tb_MedicineRowChangeEventHandler tb_MedicineRowChanging;
            
            public event tb_MedicineRowChangeEventHandler tb_MedicineRowChanged;
            
            public event tb_MedicineRowChangeEventHandler tb_MedicineRowDeleting;
            
            public event tb_MedicineRowChangeEventHandler tb_MedicineRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtb_MedicineRow(tb_MedicineRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_MedicineRow Addtb_MedicineRow(string MedicineName, string Dosage, System.DateTime StartDate, System.DateTime EndDate, tb_DoctorRow parenttb_DoctorRowBytb_Doctor_tb_Medicine, tb_UserRow parenttb_UserRowBytb_User_tb_Medicine) {
                tb_MedicineRow rowtb_MedicineRow = ((tb_MedicineRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MedicineName,
                        Dosage,
                        StartDate,
                        EndDate,
                        null,
                        null};
                if ((parenttb_DoctorRowBytb_Doctor_tb_Medicine != null)) {
                    columnValuesArray[5] = parenttb_DoctorRowBytb_Doctor_tb_Medicine[0];
                }
                if ((parenttb_UserRowBytb_User_tb_Medicine != null)) {
                    columnValuesArray[6] = parenttb_UserRowBytb_User_tb_Medicine[0];
                }
                rowtb_MedicineRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtb_MedicineRow);
                return rowtb_MedicineRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_MedicineRow FindByMedicineID(long MedicineID) {
                return ((tb_MedicineRow)(this.Rows.Find(new object[] {
                            MedicineID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tb_MedicineDataTable cln = ((tb_MedicineDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tb_MedicineDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMedicineID = base.Columns["MedicineID"];
                this.columnMedicineName = base.Columns["MedicineName"];
                this.columnDosage = base.Columns["Dosage"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnDoctorID = base.Columns["DoctorID"];
                this.columnUserID = base.Columns["UserID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMedicineID = new global::System.Data.DataColumn("MedicineID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMedicineID);
                this.columnMedicineName = new global::System.Data.DataColumn("MedicineName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMedicineName);
                this.columnDosage = new global::System.Data.DataColumn("Dosage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDosage);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnDoctorID = new global::System.Data.DataColumn("DoctorID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDoctorID);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMedicineID}, true));
                this.columnMedicineID.AutoIncrement = true;
                this.columnMedicineID.AllowDBNull = false;
                this.columnMedicineID.Unique = true;
                this.columnMedicineName.AllowDBNull = false;
                this.columnMedicineName.MaxLength = 75;
                this.columnDosage.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_MedicineRow Newtb_MedicineRow() {
                return ((tb_MedicineRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tb_MedicineRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tb_MedicineRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tb_MedicineRowChanged != null)) {
                    this.tb_MedicineRowChanged(this, new tb_MedicineRowChangeEvent(((tb_MedicineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tb_MedicineRowChanging != null)) {
                    this.tb_MedicineRowChanging(this, new tb_MedicineRowChangeEvent(((tb_MedicineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tb_MedicineRowDeleted != null)) {
                    this.tb_MedicineRowDeleted(this, new tb_MedicineRowChangeEvent(((tb_MedicineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tb_MedicineRowDeleting != null)) {
                    this.tb_MedicineRowDeleting(this, new tb_MedicineRowChangeEvent(((tb_MedicineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetb_MedicineRow(tb_MedicineRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsBPMonitor ds = new dsBPMonitor();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tb_MedicineDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tb_DoctorRow : global::System.Data.DataRow {
            
            private tb_DoctorDataTable tabletb_Doctor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tb_DoctorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletb_Doctor = ((tb_DoctorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DoctorID {
                get {
                    return ((long)(this[this.tabletb_Doctor.DoctorIDColumn]));
                }
                set {
                    this[this.tabletb_Doctor.DoctorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DoctorName {
                get {
                    return ((string)(this[this.tabletb_Doctor.DoctorNameColumn]));
                }
                set {
                    this[this.tabletb_Doctor.DoctorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tabletb_Doctor.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'tb_Doctor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletb_Doctor.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PhoneNum {
                get {
                    try {
                        return ((string)(this[this.tabletb_Doctor.PhoneNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PhoneNum\' in table \'tb_Doctor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletb_Doctor.PhoneNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long UserID {
                get {
                    return ((long)(this[this.tabletb_Doctor.UserIDColumn]));
                }
                set {
                    this[this.tabletb_Doctor.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_UserRow tb_UserRow {
                get {
                    return ((tb_UserRow)(this.GetParentRow(this.Table.ParentRelations["tb_User_tb_Doctor"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["tb_User_tb_Doctor"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tabletb_Doctor.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tabletb_Doctor.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNumNull() {
                return this.IsNull(this.tabletb_Doctor.PhoneNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNumNull() {
                this[this.tabletb_Doctor.PhoneNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_MedicineRow[] Gettb_MedicineRows() {
                if ((this.Table.ChildRelations["tb_Doctor_tb_Medicine"] == null)) {
                    return new tb_MedicineRow[0];
                }
                else {
                    return ((tb_MedicineRow[])(base.GetChildRows(this.Table.ChildRelations["tb_Doctor_tb_Medicine"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tb_UserRow : global::System.Data.DataRow {
            
            private tb_UserDataTable tabletb_User;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tb_UserRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletb_User = ((tb_UserDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long UserID {
                get {
                    return ((long)(this[this.tabletb_User.UserIDColumn]));
                }
                set {
                    this[this.tabletb_User.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    return ((string)(this[this.tabletb_User.UserNameColumn]));
                }
                set {
                    this[this.tabletb_User.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateAdded {
                get {
                    return ((global::System.DateTime)(this[this.tabletb_User.DateAddedColumn]));
                }
                set {
                    this[this.tabletb_User.DateAddedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    return ((bool)(this[this.tabletb_User.IsActiveColumn]));
                }
                set {
                    this[this.tabletb_User.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_MedicineRow[] Gettb_MedicineRows() {
                if ((this.Table.ChildRelations["tb_User_tb_Medicine"] == null)) {
                    return new tb_MedicineRow[0];
                }
                else {
                    return ((tb_MedicineRow[])(base.GetChildRows(this.Table.ChildRelations["tb_User_tb_Medicine"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_EntryRow[] Gettb_EntryRows() {
                if ((this.Table.ChildRelations["tb_User_tb_Entry"] == null)) {
                    return new tb_EntryRow[0];
                }
                else {
                    return ((tb_EntryRow[])(base.GetChildRows(this.Table.ChildRelations["tb_User_tb_Entry"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_DoctorRow[] Gettb_DoctorRows() {
                if ((this.Table.ChildRelations["tb_User_tb_Doctor"] == null)) {
                    return new tb_DoctorRow[0];
                }
                else {
                    return ((tb_DoctorRow[])(base.GetChildRows(this.Table.ChildRelations["tb_User_tb_Doctor"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tb_EntryRow : global::System.Data.DataRow {
            
            private tb_EntryDataTable tabletb_Entry;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tb_EntryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletb_Entry = ((tb_EntryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long EntryID {
                get {
                    return ((long)(this[this.tabletb_Entry.EntryIDColumn]));
                }
                set {
                    this[this.tabletb_Entry.EntryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EntryDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tabletb_Entry.EntryDateTimeColumn]));
                }
                set {
                    this[this.tabletb_Entry.EntryDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Systolic {
                get {
                    return ((long)(this[this.tabletb_Entry.SystolicColumn]));
                }
                set {
                    this[this.tabletb_Entry.SystolicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Diastolic {
                get {
                    return ((long)(this[this.tabletb_Entry.DiastolicColumn]));
                }
                set {
                    this[this.tabletb_Entry.DiastolicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long HeartRate {
                get {
                    return ((long)(this[this.tabletb_Entry.HeartRateColumn]));
                }
                set {
                    this[this.tabletb_Entry.HeartRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tabletb_Entry.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'tb_Entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletb_Entry.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long UserID {
                get {
                    return ((long)(this[this.tabletb_Entry.UserIDColumn]));
                }
                set {
                    this[this.tabletb_Entry.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_UserRow tb_UserRow {
                get {
                    return ((tb_UserRow)(this.GetParentRow(this.Table.ParentRelations["tb_User_tb_Entry"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["tb_User_tb_Entry"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tabletb_Entry.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tabletb_Entry.NotesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tb_MedicineRow : global::System.Data.DataRow {
            
            private tb_MedicineDataTable tabletb_Medicine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tb_MedicineRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletb_Medicine = ((tb_MedicineDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long MedicineID {
                get {
                    return ((long)(this[this.tabletb_Medicine.MedicineIDColumn]));
                }
                set {
                    this[this.tabletb_Medicine.MedicineIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MedicineName {
                get {
                    return ((string)(this[this.tabletb_Medicine.MedicineNameColumn]));
                }
                set {
                    this[this.tabletb_Medicine.MedicineNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Dosage {
                get {
                    try {
                        return ((string)(this[this.tabletb_Medicine.DosageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Dosage\' in table \'tb_Medicine\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletb_Medicine.DosageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletb_Medicine.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'tb_Medicine\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletb_Medicine.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletb_Medicine.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'tb_Medicine\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletb_Medicine.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DoctorID {
                get {
                    try {
                        return ((long)(this[this.tabletb_Medicine.DoctorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DoctorID\' in table \'tb_Medicine\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletb_Medicine.DoctorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long UserID {
                get {
                    try {
                        return ((long)(this[this.tabletb_Medicine.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'tb_Medicine\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletb_Medicine.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_DoctorRow tb_DoctorRow {
                get {
                    return ((tb_DoctorRow)(this.GetParentRow(this.Table.ParentRelations["tb_Doctor_tb_Medicine"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["tb_Doctor_tb_Medicine"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_UserRow tb_UserRow {
                get {
                    return ((tb_UserRow)(this.GetParentRow(this.Table.ParentRelations["tb_User_tb_Medicine"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["tb_User_tb_Medicine"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDosageNull() {
                return this.IsNull(this.tabletb_Medicine.DosageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDosageNull() {
                this[this.tabletb_Medicine.DosageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tabletb_Medicine.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tabletb_Medicine.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tabletb_Medicine.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tabletb_Medicine.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDoctorIDNull() {
                return this.IsNull(this.tabletb_Medicine.DoctorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDoctorIDNull() {
                this[this.tabletb_Medicine.DoctorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tabletb_Medicine.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tabletb_Medicine.UserIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tb_DoctorRowChangeEvent : global::System.EventArgs {
            
            private tb_DoctorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_DoctorRowChangeEvent(tb_DoctorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_DoctorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tb_UserRowChangeEvent : global::System.EventArgs {
            
            private tb_UserRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_UserRowChangeEvent(tb_UserRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_UserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tb_EntryRowChangeEvent : global::System.EventArgs {
            
            private tb_EntryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_EntryRowChangeEvent(tb_EntryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_EntryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tb_MedicineRowChangeEvent : global::System.EventArgs {
            
            private tb_MedicineRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_MedicineRowChangeEvent(tb_MedicineRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_MedicineRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
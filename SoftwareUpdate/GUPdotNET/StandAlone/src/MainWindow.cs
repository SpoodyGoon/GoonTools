//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Gtk;


namespace GUPdotNET
{
	
	
	public partial class MainWindow : Gtk.Window
	{
		private bool _SilentCheck = false;
		private bool _Loading = false;
		UpdateInfo _UpdateInfo = new UpdateInfo();
		public MainWindow(bool blnSilentCheck) :  base(Gtk.WindowType.Toplevel)
		{
			// TODO: pad the close button a little bit
			_Loading = true; 
			_SilentCheck = blnSilentCheck;
			this.Build();
			if(_SilentCheck)
			{
				// This is for checking for updates in the background
				// notifying the user only if an update is avalaiable
				this.SkipPagerHint = true;
				this.SkipTaskbarHint = true;
				this.Visible = false;
				_UpdateInfo.LoadInfo(UpdateInfoType.All);
				_UpdateInfo.SilentCheck = true;
				if(_UpdateInfo.UpdateAvailable)
					RunUpdate();
			}
			else
			{
				// this is for showing the options and optionally running an update check manually
				this.SkipPagerHint = false;
				this.SkipTaskbarHint = false;
				this.Visible = true;
				LoadControls();
			}
			_Loading = false;
			this.ShowAll();
		}
		
		private bool TimeForCheck()
		{
			bool blnReturn = false;
//			switch(Common.Option.UpdateTime)
//			{
//				case "":
//					break;
//				case "":
//					break;
//				case "":
//					break;
//				case "":
//					break;
//					
//			}
			
			return blnReturn;			
		}
		
		#region Option Widget Loading
		
		private void LoadControls()
		{
			try
			{
				cboUpdateTimeType.SetHours(Common.Option.UpdateHours);
				cbxAutoUpdate.Active = Common.Option.AutoUpdate;
				if(cbxAutoUpdate.Active == false)
					frame1.Sensitive = false;
				else
					frame1.Sensitive = true;
				
				cboUpdateTimeType.Changed += new EventHandler(OnCboUpdateTimeTypeChanged);
				lblLastCheck.Text = Common.Option.LastUpdateCheck.ToShortDateString();
				lblLastUpdate.Text = Common.Option.LastUpdate.ToShortDateString();
			}
			catch(Exception ex)
			{
				Common.HandleError(ex);
			}
		}
		
		#endregion Option Widget Loading
		
		#region Widget Events
		
		protected virtual void OnBtnCheckNowClicked (object sender, System.EventArgs e)
		{
			if(_UpdateInfo.UpdateAvailable)
			{
					RunUpdate();
			}
			else
			{
				MessageDialog md = new MessageDialog(this, DialogFlags.Modal, MessageType.Info, Gtk.ButtonsType.Ok, false, "No Update Available", "No Update Available");
				md.Run();
				md.Destroy();
			}
		}
		
		
		protected virtual void OnbtnCloseClicked (object sender, System.EventArgs e)
		{
			Common.SaveOptions();
			Gtk.Application.Quit();
		}
		
		
		protected virtual void OnCbxAutoUpdateToggled (object sender, System.EventArgs e)
		{
			try
			{
				if(!_Loading)
				{
					Common.Option.AutoUpdate = (bool)cbxAutoUpdate.Active;
					if((bool)cbxAutoUpdate.Active == false)
					{
						_Loading = true;
						cboUpdateTimeType.SetTimeDisplay("Never");
						frame1.Sensitive = false;
						_Loading = false;
					}
					else
					{
						_Loading = true;
						if(cboUpdateTimeType.TimeDisplay == "Never")
							cboUpdateTimeType.SetTimeDisplay("Day");
						frame1.Sensitive = true;
						_Loading = false;
					}
				}
			}
			catch(Exception ex)
			{
				Common.HandleError(ex);
			}
		}
		
		
		protected virtual void OnCboUpdateTimeTypeChanged (object sender, System.EventArgs e)
		{
			try
			{
				if(!_Loading)
				{
					if((string)cboUpdateTimeType.TimeDisplay == "Never")
					{
						_Loading = true;
						cbxAutoUpdate.Active = false;
						frame1.Sensitive = false;
						_Loading = false;
					}
					else
					{						
						_Loading = true;
						cbxAutoUpdate.Active = true;
						frame1.Sensitive = true;
						_Loading = false;
					}
					Common.Option.UpdateTime = (string)cboUpdateTimeType.ActiveText;
				}
			}
			catch(Exception ex)
			{
				Common.HandleError(ex);
			}
		}
		
		protected virtual void OnBtnAboutClicked (object sender, System.EventArgs e)
		{
			btnAbout.Relief = Gtk.ReliefStyle.None;
			btnAbout.State = Gtk.StateType.Normal;
			btnAbout.ShowNow();
			try
			{
				System.Reflection.Assembly asm = System.Reflection.Assembly.GetExecutingAssembly();
				Gtk.AboutDialog ad = new Gtk.AboutDialog();
				ad.Title = "About GUPdotNET";
				ad.ProgramName = "GUPdotNET";
				ad.Comments ="General Purpose Update program for Mono/Gtk#.";
				ad.License = GUPdotNET.Const.License;
				ad.Authors = new String[]{"Andrew York <goontools@brdstudio.net>"};
				ad.Version = " " + asm.GetName().Version.Major.ToString() + "." + asm.GetName().Version.Minor.ToString() + " alpha";
				ad.Logo = Gdk.Pixbuf.LoadFromResource("update_large.png");
				ad.Icon = Gdk.Pixbuf.LoadFromResource("update_small.png");
				ad.AllowShrink = true;
				ad.AllowGrow = true;
				ad.Copyright = "GoonTools 2009";
				ad.HasSeparator = true;
				ad.Modal = true;
				ad.BorderWidth = 8;
				ad.WidthRequest = 400;
//				ad.HeightRequest = 300;
				ad.Website = "http://code.google.com/p/goontools/wiki/GUPdotNet";
				ad.WebsiteLabel = "GUPdotNET Web Site";
				ad.Run();
				
				btnAbout.Relief = Gtk.ReliefStyle.None;
				btnAbout.State = Gtk.StateType.Normal;
				btnAbout.ShowNow();
				ad.Destroy();
			}
			catch(Exception ex)
			{
				Common.HandleError(ex);
			}
		}
		
		
		protected virtual void OnBtnAboutEntered (object sender, System.EventArgs e)
		{
			btnAbout.State = Gtk.StateType.Normal;
			btnAbout.ShowNow();
		}
		
		
		protected virtual void OnBtnAboutPressed (object sender, System.EventArgs e)
		{
			btnAbout.Relief = Gtk.ReliefStyle.None;
			btnAbout.State = Gtk.StateType.Normal;
			btnAbout.ShowNow();
		}
		
		
		protected virtual void OnBtnAboutActivated (object sender, System.EventArgs e)
		{
			btnAbout.Relief = Gtk.ReliefStyle.None;
			btnAbout.State = Gtk.StateType.Normal;
			btnAbout.ShowNow();
		}
		
		
		protected virtual void OnBtnAboutReleased (object sender, System.EventArgs e)
		{
			btnAbout.Relief = Gtk.ReliefStyle.None;
			btnAbout.State = Gtk.StateType.Normal;
			btnAbout.ShowNow();
		}
		
		
		protected virtual void OnDeleteEvent (object o, Gtk.DeleteEventArgs args)
		{
			if(!_SilentCheck)
				Common.SaveOptions();
			
			Gtk.Application.Quit();
		}

		#endregion Widget Events
	
		private void RunUpdate()
		{
			
		}
	
	}
}

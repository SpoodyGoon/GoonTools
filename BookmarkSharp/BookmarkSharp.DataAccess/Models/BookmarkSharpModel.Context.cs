//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BookmarkSharp.DataAccess.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SQL2005_378689_brdstudioEntities : DbContext
    {
        public SQL2005_378689_brdstudioEntities()
            : base("name=SQL2005_378689_brdstudioEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<tb_Bookmark> tb_Bookmark { get; set; }
        public DbSet<tb_BookmarkConfig> tb_BookmarkConfig { get; set; }
        public DbSet<tb_Folder> tb_Folder { get; set; }
        public DbSet<tb_StatusDescription> tb_StatusDescription { get; set; }
        public DbSet<tb_Tag> tb_Tag { get; set; }
    
        public virtual int sp_BookmarkConfigAddUpdate(Nullable<int> configID, string fullName, string userName, string password, string defaultSortBy, Nullable<bool> isActive)
        {
            var configIDParameter = configID.HasValue ?
                new ObjectParameter("ConfigID", configID) :
                new ObjectParameter("ConfigID", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var defaultSortByParameter = defaultSortBy != null ?
                new ObjectParameter("DefaultSortBy", defaultSortBy) :
                new ObjectParameter("DefaultSortBy", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BookmarkConfigAddUpdate", configIDParameter, fullNameParameter, userNameParameter, passwordParameter, defaultSortByParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_BookmarkConfigGet_Result> sp_BookmarkConfigGet(Nullable<int> configID, string userName)
        {
            var configIDParameter = configID.HasValue ?
                new ObjectParameter("ConfigID", configID) :
                new ObjectParameter("ConfigID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BookmarkConfigGet_Result>("sp_BookmarkConfigGet", configIDParameter, userNameParameter);
        }
    
        public virtual int sp_BookmarkFoldersAddUpdate(Nullable<int> folderID, string folderName, Nullable<int> depth, Nullable<int> position, string comment, Nullable<short> statusID)
        {
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            var folderNameParameter = folderName != null ?
                new ObjectParameter("FolderName", folderName) :
                new ObjectParameter("FolderName", typeof(string));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(int));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BookmarkFoldersAddUpdate", folderIDParameter, folderNameParameter, depthParameter, positionParameter, commentParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<sp_BookmarkFoldersGet_Result> sp_BookmarkFoldersGet(Nullable<int> folderID, string folderName, Nullable<int> depth, Nullable<short> statusID)
        {
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            var folderNameParameter = folderName != null ?
                new ObjectParameter("FolderName", folderName) :
                new ObjectParameter("FolderName", typeof(string));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BookmarkFoldersGet_Result>("sp_BookmarkFoldersGet", folderIDParameter, folderNameParameter, depthParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<sp_BookmarkLoginGet_Result> sp_BookmarkLoginGet(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BookmarkLoginGet_Result>("sp_BookmarkLoginGet", userNameParameter, passwordParameter);
        }
    
        public virtual int sp_BookmarksAddUpdate(Nullable<int> bookmarkID, Nullable<int> folderID, string title, string uRL, Nullable<int> position, string comment, Nullable<short> statusID)
        {
            var bookmarkIDParameter = bookmarkID.HasValue ?
                new ObjectParameter("BookmarkID", bookmarkID) :
                new ObjectParameter("BookmarkID", typeof(int));
    
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BookmarksAddUpdate", bookmarkIDParameter, folderIDParameter, titleParameter, uRLParameter, positionParameter, commentParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<sp_BookmarksGet_Result> sp_BookmarksGet(Nullable<int> bookmarkID, Nullable<int> folderID, string title, string uRL, Nullable<short> statusID)
        {
            var bookmarkIDParameter = bookmarkID.HasValue ?
                new ObjectParameter("BookmarkID", bookmarkID) :
                new ObjectParameter("BookmarkID", typeof(int));
    
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BookmarksGet_Result>("sp_BookmarksGet", bookmarkIDParameter, folderIDParameter, titleParameter, uRLParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<sp_StatusDescriptionGet_Result> sp_StatusDescriptionGet(string statusKey)
        {
            var statusKeyParameter = statusKey != null ?
                new ObjectParameter("StatusKey", statusKey) :
                new ObjectParameter("StatusKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StatusDescriptionGet_Result>("sp_StatusDescriptionGet", statusKeyParameter);
        }
    
        public virtual int sp_TagAddUpdate(Nullable<int> tagID, string tagName, Nullable<int> bitMask, string comment, Nullable<short> statusID)
        {
            var tagIDParameter = tagID.HasValue ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(int));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            var bitMaskParameter = bitMask.HasValue ?
                new ObjectParameter("BitMask", bitMask) :
                new ObjectParameter("BitMask", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TagAddUpdate", tagIDParameter, tagNameParameter, bitMaskParameter, commentParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<sp_TagByBookmarkIDGet_Result> sp_TagByBookmarkIDGet(Nullable<int> bookmarkID, Nullable<short> statusID)
        {
            var bookmarkIDParameter = bookmarkID.HasValue ?
                new ObjectParameter("BookmarkID", bookmarkID) :
                new ObjectParameter("BookmarkID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TagByBookmarkIDGet_Result>("sp_TagByBookmarkIDGet", bookmarkIDParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<sp_TagGet_Result> sp_TagGet(Nullable<int> tagID, string tagName, Nullable<short> statusID)
        {
            var tagIDParameter = tagID.HasValue ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(int));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TagGet_Result>("sp_TagGet", tagIDParameter, tagNameParameter, statusIDParameter);
        }
    }
}
